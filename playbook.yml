---
- name: Install kube-prompt on a remote system
  hosts: "kube-prompt"
  vars:
    kube_prompt_path: "github.com/c-bata/kube-prompt"

  tasks:
    # Check if the go binarly already exists.
    - name: Check if go already exists in PATH
      shell: which go
      register: which_go
      ignore_errors: true

    # Get the version of go.
    - name: Checking the path to the go binary
      stat:
        path: "{{ which_go.stdout }}"
      register: go

    # Download the installer_linux file.
    - name: Download the golang Linux installer
      get_url:
        url: "https://storage.googleapis.com/golang/getgo/installer_linux"
        dest: "{{ ansible_user_dir }}"
        mode: u+x
      tags: download,install
      when: go.stat.exists == false

    # Call the installer_linux executable.
    - name: Call the golang installer
      command: "{{ ansible_user_dir }}/installer_linux"
      tags: install
      when: go.stat.exists == false

    # Create the path to the go binary.
    - name: Create the path to the go binary
      set_fact:
        go: "{{ ansible_user_dir }}/.go/bin/go"
      when: go.stat.exists == false

    # The installer sets up GOPATH in .bash_profile.
    - name: Find the GOPATH variable set by the installer
      shell: "source {{ ansible_user_dir }}/.bash_profile; echo $GOPATH"
      args:
        executable: /bin/bash
      register: path

    # Create a gopath variable based on the information from the last command.
    - name: Set the gopath variable
      set_fact:
        gopath: "{{ path.stdout }}"

    - name: Set the gopath variable if path is empty
      set_fact:
        gopath: "{{ ansible_user_dir ~ '/go') }}"
      when: gopath == ""

    # Install the Golang dep command on the remote system.
    - name: Get the Go dep code and compile it
      # The -u flag instructs get to use the network to update the named
      # packages and their dependencies.
      command: "{{ go }} get -v -u github.com/golang/dep/cmd/dep"

    # Install the kube-prompt go package on the remote system.
    - name: Get the kube-prompt code
      command: "{{ go }} get -v {{ kube_prompt_path }}"
      # This command will fail, until the dependencies are managed.
      ignore_errors: true

    # Change directory and manage the dependencies for the kube-prompt package.
    - name: Manage the dependencies of the kube-prompt package
      command: "{{ gopath }}/bin/dep ensure -v"
      args:
        chdir: "{{ gopath }}/src/{{ kube_prompt_path }}"

    # Change directory and build the kube-prompt in the GOPATH/bin directory.
    - name: Build the kube-prompt project
      command: "{{ go }} build -v {{ kube_prompt_path }}"
      args:
        chdir: "{{ gopath }}/bin"

    # Ensure the kube-prompt file exists in the bin directory.
    - name: Ensure the kube-prompt binary was built
      file:
        path: "{{ gopath }}/bin/kube-prompt"
        state: file

    # Print out the location of the resulting binary file.
    - name: Print out the location of the kube-prompt binary
      debug:
        msg: "The kube-prompt binary can be found at: {{ gopath }}/bin/kube-prompt"
